#version 330 core

// -- primitiveTypes
#define d_vertex_buffer 0
#define d_image 1
#define d_circle 2
#define d_rectangle 3
#define d_font_image_map 4
#define d_expansion 5
#define d_fast_line 6
#define d_mesh_line 7
#define d_point 8
#define d_primitive d_vertex_buffer


// -- drawerUniforms    
layout(shared) uniform ContextBlock {
    uniform mat4 u_modelNormalMatrix;
    uniform mat4 u_modelMatrix;
    uniform mat4 u_viewNormalMatrix;
    uniform mat4 u_viewMatrix;
    uniform mat4 u_projectionMatrix;
    uniform float u_contentScale;
    uniform vec2 u_viewDimensions;
};

layout(shared) uniform StyleBlock {
    uniform vec4 u_fill;
    uniform vec4 u_stroke;
    uniform float u_strokeWeight;
    uniform float[25] u_colorMatrix;
};

in vec3 a_position;
in mat4 i_scale;
in vec3 i_color;

uniform int p_res;
uniform sampler2D p_posTex;
uniform sampler2D p_rotTex;
uniform float p_TAU;
uniform float p_time;
uniform float p_range;
uniform mat4 p_viewMatrix;

out vec3 va_position;
out mat4 vi_scale;
out vec3 vi_color;


// -- transformVaryingOut    
out vec3 v_worldNormal;
out vec3 v_viewNormal;
out vec3 v_worldPosition;
out vec3 v_viewPosition;
out vec4 v_clipPosition;

flat out mat4 v_modelNormalMatrix;



flat out int v_instance;
void main() {
    int instance = gl_InstanceID; // this will go use c_instance instead
    int c_instance = gl_InstanceID;
    int c_element = 0;
    va_position = a_position;
vi_scale = i_scale;
vi_color = i_color;

    vec3 x_normal = vec3(0.0, 0.0, 0.0);
    
    vec3 x_position = a_position;

    
    // -- preTransform
    mat4 x_modelMatrix = u_modelMatrix;
    mat4 x_viewMatrix = u_viewMatrix;
    mat4 x_modelNormalMatrix = u_modelNormalMatrix;
    mat4 x_viewNormalMatrix = u_viewNormalMatrix;
    mat4 x_projectionMatrix = u_projectionMatrix;

    {
        vec4 pos = texelFetch(p_posTex, ivec2(c_instance % p_res, int(c_instance / p_res)), 0);
vec4 rot = texelFetch(p_rotTex, ivec2(c_instance % p_res, int(c_instance / p_res)), 0);

rot.xyz *= p_TAU;
rot.xyz += p_time * 1.0 / (1 + c_instance);

pos *= p_range;

float x = pos.x;// * p_range;
float y = pos.y;// * p_range;
float z = pos.z;// * p_range;

float cosX = cos(rot.x);
float sinX = sin(rot.x);
float cosY = cos(rot.y);
float sinY = sin(rot.y);
float cosZ = cos(rot.z);
float sinZ = sin(rot.z);

mat4 rotation = mat4(1.0);

float m00 = cosY * cosZ + sinX * sinY * sinZ; 
float m01 = cosY * sinZ - sinX * sinY * cosZ; 
float m02 = cosX * sinY;
float m03 = 0.0;

float m04 = -cosX * sinZ; 
float m05 = cosX * cosZ; 
float m06 = sinX;
float m07 = 0.0;

float m08 = sinX * cosY * sinZ - sinY * cosZ;
float m09 = -sinY * sinZ - sinX * cosY * cosZ;
float m10 = cosX * cosY;
float m11 = 0.0;

//------ Orientation ---------------------------------
rotation[0] = vec4(m00, m01, m02, m03); // first column.
rotation[1] = vec4(m04, m05, m06, m07); // second column.
rotation[2] = vec4(m08, m09, m10, m11); // third column.

mat4 translation = mat4(1.0);
translation[3] = vec4(x, y, z, 1.0);

x_viewMatrix = p_viewMatrix;
x_modelMatrix = translation * rotation * i_scale;

gl_PointSize = 1000.0
    }
    
    // -- postTransform
    v_worldNormal = (x_modelNormalMatrix * vec4(x_normal,0.0)).xyz;
    v_viewNormal = (x_viewNormalMatrix * vec4(v_worldNormal,0.0)).xyz;
    v_worldPosition = (x_modelMatrix * vec4(x_position, 1.0)).xyz;
    v_viewPosition = (x_viewMatrix * vec4(v_worldPosition, 1.0)).xyz;
    v_clipPosition = x_projectionMatrix * vec4(v_viewPosition, 1.0);
    v_modelNormalMatrix = x_modelNormalMatrix;


    v_instance = instance;
    gl_Position = v_clipPosition;
}