#version 330 core

// -- primitiveTypes
#define d_vertex_buffer 0
#define d_image 1
#define d_circle 2
#define d_rectangle 3
#define d_font_image_map 4
#define d_expansion 5
#define d_fast_line 6
#define d_mesh_line 7
#define d_point 8
#define d_primitive d_vertex_buffer


// -- drawerUniforms    
layout(shared) uniform ContextBlock {
    uniform mat4 u_modelNormalMatrix;
    uniform mat4 u_modelMatrix;
    uniform mat4 u_viewNormalMatrix;
    uniform mat4 u_viewMatrix;
    uniform mat4 u_projectionMatrix;
    uniform float u_contentScale;
    uniform vec2 u_viewDimensions;
};

layout(shared) uniform StyleBlock {
    uniform vec4 u_fill;
    uniform vec4 u_stroke;
    uniform float u_strokeWeight;
    uniform float[25] u_colorMatrix;
};

in vec3 a_position;
in vec2 a_texCoord0;
in mat4 i_scale;
in vec4 i_colors[3];

uniform int p_res;
uniform sampler2D p_posTex;
uniform sampler2D p_rotTex;
uniform sampler2D p_infoTex;
uniform float p_TAU;
uniform float p_time;
uniform int p_count;
uniform int p_colorsSize;
uniform float p_ageLimit;
uniform float p_range;
uniform float p_alpha;
uniform mat4 p_viewMatrix;
uniform mat4 p_cameraWorldSpace;

out vec3 va_position;
out vec2 va_texCoord0;
out mat4 vi_scale;
out vec4 vi_colors[3];


// -- transformVaryingOut    
out vec3 v_worldNormal;
out vec3 v_viewNormal;
out vec3 v_worldPosition;
out vec3 v_viewPosition;
out vec4 v_clipPosition;

flat out mat4 v_modelNormalMatrix;

out float age;
out vec4 color;

flat out int v_instance;
void main() {
    int instance = gl_InstanceID; // this will go use c_instance instead
    int c_instance = gl_InstanceID;
    int c_element = 0;
    va_position = a_position;
    va_texCoord0 = a_texCoord0;
vi_scale = i_scale;
vi_colors = i_colors;

    vec3 x_normal = vec3(0.0, 0.0, 0.0);
    
    vec3 x_position = a_position;

    
    // -- preTransform
    mat4 x_modelMatrix = u_modelMatrix;
    mat4 x_viewMatrix = u_viewMatrix;
    mat4 x_modelNormalMatrix = u_modelNormalMatrix;
    mat4 x_viewNormalMatrix = u_viewNormalMatrix;
    mat4 x_projectionMatrix = u_projectionMatrix;

    {
        vec4 pos = texelFetch(p_posTex, ivec2(c_instance % p_res, int(c_instance / p_res)), 0);
vec4 info = texelFetch(p_infoTex, ivec2(c_instance % p_res, int(c_instance / p_res)), 0);

float dist = distance(pos.xyz, vec3(0.0));

pos *= p_range;

age = info.x;

mat4 translation = mat4(1.0);
translation[3] = vec4(pos.xyz, 1.0);

mat4 rot = mat4(1.0);

// Column 0:
rot[0][0] = p_cameraWorldSpace[0][0];
rot[0][1] = p_cameraWorldSpace[0][1];
rot[0][2] = p_cameraWorldSpace[0][2];

// Column 1:
rot[1][0] = p_cameraWorldSpace[1][0];
rot[1][1] = p_cameraWorldSpace[1][1];
rot[1][2] = p_cameraWorldSpace[1][2];

// Column 2:
rot[2][0] = p_cameraWorldSpace[2][0];
rot[2][1] = p_cameraWorldSpace[2][1];
rot[2][2] = p_cameraWorldSpace[2][2];

color = i_colors[floor((info.y / p_count) * p_colorsSize)];

x_viewMatrix = p_viewMatrix;
x_modelMatrix = translation * rot * i_scale;
    }
    
    // -- postTransform
    v_worldNormal = (x_modelNormalMatrix * vec4(x_normal,0.0)).xyz;
    v_viewNormal = (x_viewNormalMatrix * vec4(v_worldNormal,0.0)).xyz;
    v_worldPosition = (x_modelMatrix * vec4(x_position, 1.0)).xyz;
    v_viewPosition = (x_viewMatrix * vec4(v_worldPosition, 1.0)).xyz;
    v_clipPosition = x_projectionMatrix * vec4(v_viewPosition, 1.0);
    v_modelNormalMatrix = x_modelNormalMatrix;


    v_instance = instance;
    gl_Position = v_clipPosition;
}